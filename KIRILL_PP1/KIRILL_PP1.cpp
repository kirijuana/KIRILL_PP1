#include "stdafx.h"
#include <pthread.h>
#include <vector>
#include <string>
#include <iostream>
using namespace std;

// объ€вление двумерного массива 4х4
int mas[4][4] = { {1,2,4,8},{ 13,3,7,5},{ 9,6,4,8},{ 15,6,8,5} };
// объ€вление массивов дл€ хранени€ сумм строк и столбцов
int sum_str[4], sum_stolb[4];

void *sum(void *param)
{
	// объ€вление индекса раздел€ющего рассчет дл€ каждого потока.
	// функци€ sum принимает единственный параметр - это номер потока, так вот ниже этот 
	// параметр умножаетс€ на 2, потому что потоков всего 2(они объ€влены ниже, в главной функции main)
	// ѕример: когда в качестве параметра передаетс€ 0 (нулевой поток, т.е. первый), т.е. param = 0, тогда p = 0 * 2 = 0. 
	// ѕосле этого передаетс€ 1 (второй поток), т.е. param = 1, тогда p = 1 * 2 = 2;
	// Ќиже будет пон€тнее дл€ чего это.
	int p = (*(int *)param) * 2;
	
	// объ€вление локальных переменных дл€ вычислени€ отдельных строк и столбцов
	int *sum_str_1; sum_str_1 = new int; *sum_str_1 = 0;
	int *sum_stolb_1; sum_stolb_1 = new int; *sum_stolb_1 = 0;
	
	// “ут как раз таки примен€етс€ эта p, котора€ была вычислена выше. 
    // ѕервый поток вычисл€ет сумму строк и столбцов от 0 (i = p, где p = 0) до 2 (p + 2, где p = 0 дл€ первого потока)
	// ¬торой поток вычисл€ет сумму строк и столбцов от 2 (i = p, где p = 2) до 4 (p + 2, где p = 2 дл€ второго потока потока)
	// “ем самым достигаетс€ разделение вычислений между потоками
	for (int i = p; i <  p + 2; i++)
	{
		for (int j = 0; j < 4; j++)
		{			
			*sum_str_1 = *sum_str_1 + mas[i][j];
			*sum_stolb_1 = *sum_stolb_1 + mas[j][i];
		}
		sum_stolb[i] = *sum_stolb_1;
		sum_str[i] = *sum_str_1;		
		*sum_str_1 = 0;
		*sum_stolb_1 = 0;
	}
	return NULL;
}

int main()
{
	// объ€вление двух потоков и массива дл€ хранени€ параметров потока
	pthread_t thread[2]; int number[2];

	for (int i = 0; i<2; i++)
	{
		number[i] = i; //дл€ передачи параметра потоку
		// создание потока (т.е. потоки запускаютс€ и выполн€ют функцию, котора€ объ€влена выше функции main)
		pthread_create(&thread[i], NULL, sum, (void *)(number + i));
	}

	for (int i = 0; i<2; i++)
	{ //ожидание завершени€ работы дочерних потоков
	  //и получение результата их вычислений
		pthread_join(thread[i], NULL);
	}
	
	// вывод вычисленных сумм :)
	for (int i = 0; i < 4; i++)
	{
		cout << "—умма cтроки є" << i + 1 << " " << sum_str[i] << endl;
	}
	for (int i = 0; i < 4; i++)
	{
		cout << "—умма cтолбца є" << i + 1 << " " << sum_stolb[i] << endl;
	}
	
	system("pause");

}

